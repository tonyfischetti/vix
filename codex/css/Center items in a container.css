// css, flexbox, center, justify-content, flex-flow, align-items flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, flex-start, self-start, flex-end, self-end, center, baseline

/**
 *
 * `justify-content` will center+ along the main axis
 * `align-items` will center+ along the cross axis
 *
 * If it's a row (horizontal) container...
 *   - use `justify-content` to center it horizontally
 *   - use `align-items` to center it vertically
 *   - you can use both
 *
 * If it's a column (vertical) container...
 *   - use `justify-content` to center it vertically
 *   - use `align-items` to center it horizontally
 *   - you can use both
 *
 * + or `space-around`, etc... (see below)
 *
 **/


/**
 * Center the items along the main axis of a
 * row (horizontal) flex-direction (horizontal centering)
 **/
#parent {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
}


/**
 * Center the items along the cross axis of a
 * row (horizontal) flex-direction (vertical centering)
 **/
#parent {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
}


/**
 * Center the items along the main axis of a
 * column (vertical) flex-direction (vertical centering)
 **/
#parent {
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
}


/**
 * Center the items along the cross axis of a
 * column (vertical) flex-direction (horizontal centering)
 **/
#parent {
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
}


/**
 * You can also use the following with `justify-content`
 *
 * flex-start*:     items are packed toward the start of the flex-direction.
 * flex-end:        items are packed toward the end of the flex-direction.
 * center:          items are centered along the line
 * space-between:   items are evenly distributed in the line; first item is on the start line, last item on the end line
 * space-around:    items are evenly distributed in the line with equal space around them. Note that visually the spaces arenâ€™t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
 * space-evenly:    items are distributed so that the spacing between any two items (and the space to the edges) is equal.
 *
 *
 * You can also use the following with `align-items`
 *
 * stretch (default): stretch to fill the container (still respect min-width/max-width)
 * flex-start / start / self-start: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the flex-direction rules or the writing-mode rules.
 * flex-end / end / self-end: items are placed at the end of the cross axis. The difference again is subtle and is about respecting flex-direction rules vs. writing-mode rules.
 * center: items are centered in the cross-axis
 * baseline: items are aligned such as their baselines align
 *
 **/

