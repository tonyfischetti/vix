
snippet #!
	
	.DELETE_ON_ERROR:
	
	INCDIR    := include
	SRCDIR    := src
	DOCDIR    := docs
	BUILDDIR  := build
	TARGETDIR := target
	
	CC        := gcc
	CXX       := g++
	CFLAGS    := -O2 -Wall -Wextra -I.
	CXXFLAGS  := -std=c++20 -O2 -I. -pedantic -Wall -Wextra -Werror -Wshadow
	CXXFLAGS  += -Wconversion -Wsign-conversion -Wunreachable-code
	CXXFLAGS  += -I\$(INCDIR)
	CPPFLAGS  :=
	LDFLAGS   :=
	LDLIBS    := -lsystemd
	
	EXE       := farm
	SRCS      := \$(wildcard \$(SRCDIR)/*.cpp \$(SRCDIR)/*.c)
	OBJS      := \$(notdir \$(patsubst %.cpp, %.o, \$(SRCS)))
	DESTOBJS  := \$(addprefix \$(BUILDDIR)/, \$(OBJS))
	RAWDOCS   := \$(notdir \$(wildcard \$(DOCDIR)/*.md))
	DESTDOCS  := \$(patsubst %.md, %.pdf, \$(addprefix \$(TARGETDIR)/\$(DOCDIR)/, \$(RAWDOCS)))
	DEPS      := \$(wildcard \$(INCDIR)/*.h) # leaving out the hpp files
	
	
	vpath %.h   \$(INCDIR)
	vpath %.hpp \$(INCDIR)
	vpath %.cpp \$(SRCDIR)
	vpath %.o   \$(BUILDDIR)
	vpath %.md  \$(DOCDIR)
	
	.PHONY: all clean mrproper dist check test install done
	
	all: \$(TARGETDIR)/\$(EXE) \$(DESTDOCS) done
	
	\$(TARGETDIR)/\$(EXE): \$(DESTOBJS)
		@mkdir -p \$(TARGETDIR)
		\$(info [•] linking final executable)
		@\$(CXX) -o \$@ \$^ \$(CXXFLAGS) \$(CPPFLAGS) \$(LDFLAGS) \$(LDLIBS)
	
	\$(BUILDDIR)/%.o: %.cpp \$(DEPS)
		@mkdir -p \$(BUILDDIR)
		\$(info [*] compiling "\$@")
		@\$(CXX) -c -o \$@ \$< \$(CXXFLAGS) \$(CPPFLAGS)
	
	# this is a more specific rule than above...
	# this is where we use the .hpp file
	\$(BUILDDIR)/farm.o: farm.cpp \$(DEPS) rang.hpp
		@mkdir -p \$(BUILDDIR)
		\$(info [*] compiling "\$@")
		@\$(CXX) -c -o \$@ \$< \$(CXXFLAGS) \$(CPPFLAGS)
	
	
	\$(TARGETDIR)/\$(DOCDIR)/%.pdf: %.md
		\$(info)
		\$(info [*] building doc "\$^")
		@mkdir -p \$(TARGETDIR)/\$(DOCDIR)
		@pandoc \$^ -o \$@
	
	
	done:
		\$(info [•] done!)
	
	
	clean:
		rm -f \$(EXE)
		rm -rf \$(BUILDDIR) \$(TARGETDIR)
	

